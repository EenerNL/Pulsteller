# ESPhome-code based on code from Huizebruin/s0tool en mhendriks/esphome-p1
# Usable for counting energy and water

#===== BASE CONFIG =====#  BEGIN  #==
substitutions:
  version: 'beta27'
  device_description: 'Pulsteller / ${version}'
  device_name: 'Pulsteller'

esphome:
  name: ${device_name}
  comment: '${device_description}'
  project:
    name: EenerNL.${device_name}
    version: "${version}"
  platform: esp8266
  board: d1_mini
  esp8266_restore_from_flash: true
  
dashboard_import:
  package_import_url: github://EenerNL/pulsteller/pulsteller.yaml

ota:

wifi:
  ap:
    ssid: ${device_name}
    ap_timeout: 15s
captive_portal:
web_server:
  port: 80
  
logger:
  level: DEBUG
  esp8266_store_log_strings_in_flash: false
#===== BASE CONFIG =====#  END  #==

#===== GLOBAL VARIABLES =====#  BEGIN  #==
# not used
#===== GLOBAL VARIABLES =====#  END  #==

#===== BUTTONS / SETTINGS =====#  BEGIN  #==
button:  
  - platform: restart
    name: 'Restart Pulsteller'
  - platform: template
    name: "Reset Verbruik sinds online"
    id: button_reset_total
    on_press:
      - pulse_meter.set_total_pulses:
          id: actual_power
          value: 0
number:
  - platform: template
    id: pulse_rate
    name: 'Instelling Pulsrate kWh'
    optimistic: true
    mode: box
    min_value: '1'
    max_value: '4000'
    step: '1'
    restore_value: yes
    initial_value: '1000'
  - platform: template
    id: pulse_rate_water
    name: 'Instelling Pulsrate m3'
    optimistic: true
    mode: box
    min_value: '1'
    max_value: '1000'
    step: '1'
    restore_value: yes
    initial_value: '1000'
#===== BUTTONS / SETTINGS =====#  END  #==

#===== HOME ASSISTANT =====#  BEGIN  #==
api:
  services:
    - service: adjust_total_kwh
      variables:
        total_value: float
      then:
        - pulse_meter.set_total_pulses:
            id: actual_power
            value: !lambda 'return total_value * 1000;'
    - service: adjust_total_m3
      variables:
        total_value_water: float
      then:
        - pulse_meter.set_total_pulses:
            id: actual_water
            value: !lambda 'return total_value_water * 1000;'
time:
  - platform: homeassistant
    id: homeassistant_time
#===== HOME ASSISTANT =====#  END  #==

#===== POWER SENSORS =====#  BEGIN  #==
sensor:
  - platform: pulse_meter
    pin: D5
    id: actual_power
    name: 'Pulsteller Actueel vermogen'                 # displayname in frontend / home assistant
    unit_of_measurement: 'kW'
    accuracy_decimals: 3
    state_class: measurement
    device_class: power
    icon: 'mdi:flash'                                   # icon type in home assistant
    filters:
       lambda: return x * (60.0 / id(pulse_rate).state);
    total:
      id: total_power_usage
      name: 'Pulsteller Verbruik sinds online'         # displayname in frontend / home assistant
      unit_of_measurement: 'kWh'
      accuracy_decimals: 3
      state_class: total_increasing
      device_class: energy
      icon: 'mdi:flash'                                 # icon type in home assistant
      filters:
        - lambda: return x * (1.0 / id(pulse_rate).state);
  - platform: total_daily_energy
    name: 'Pulsteller Verbruik vandaag'                 # displayname in frontend / home assistant
    id: daily_power_usage
    power_id: actual_power
    unit_of_measurement: 'kWh'
    icon: 'mdi:circle-slice-3'                          # icon type in home assistant
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    restore: true
#===== POWER SENSORS =====#  END  #==

#===== WATER SENSORS =====#  BEGIN  #==
  - platform: pulse_meter
    pin: D2
    id: actual_water
    name: 'Watermeter actueel'                          # displayname in frontend / home assistant
    unit_of_measurement: 'l/min'
    accuracy_decimals: 1
    state_class: measurement
    device_class: water
    icon: 'mdi:water'                                   # icon type in home assistant
    total:
      id: total_water_usage
      name: 'Waterverbruik sinds online'                # displayname in frontend / home assistant
      unit_of_measurement: 'm3'
      accuracy_decimals: 3
      state_class: total_increasing
      device_class: water
      icon: 'mdi:water'                                 # icon type in home assistant
      filters:
        - multiply: 0.001
  - platform: total_daily_energy
    name: 'Waterverbruik vandaag'                       # displayname in frontend / home assistant
    id: daily_water_usage
    power_id: actual_water
    unit_of_measurement: 'm3'
    icon: 'mdi:circle-slice-3'                          # icon type in home assistant
    state_class: total_increasing
    device_class: water
    accuracy_decimals: 3
    restore: true
#===== WATER SENSORS =====#  END  #==

#===== UTILITY SENSORS =====#  BEGIN  #==
  - platform: uptime
    name: 'Uptime'
    id: uptime_sensor
    internal: true
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

text_sensor:
  - platform: wifi_info
    ip_address:
      name: 'Wi-Fi IP-adres'                            # displayname in frontend / home assistant
      icon: mdi:ip-network
    ssid:
      name: 'Wi-Fi SSID'                                # displayname in frontend / home assistant
      icon: mdi:access-point-network
    mac_address:
      name: 'Wi-Fi Mac-adres'                           # displayname in frontend / home assistant
      icon: mdi:folder-key-network-outline
      
  - platform: template
    name: 'Versie Pulsteller'                           # displayname in frontend / home assistant
    icon: 'mdi:label-outline'                           # icon type in home assistant
    update_interval: 6h
    lambda: return {"$version"};
      
  - platform: version
    name: 'Versie ESPHome'                              # displayname in frontend / home assistant
    hide_timestamp: true

  - platform: template
    name: 'Uptime'                                      # displayname in frontend / home assistant
    id: uptime_human
    icon: 'mdi:clock-start'                             # icon type in home assistant
#===== UTILITY SENSORS =====#  END  #==
